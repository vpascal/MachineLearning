library(caret); library(readr); library(randomForest)
dataset <- read_csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
data_trainig <- read_csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
cat("Training dataset:",dim(dataset))
cat("Testing dataset:",dim(data_trainig))
na_count <- function(x){sum(is.na(x))}
names(dataset[sapply(dataset,na_count)>1900])
clean <- function(dataset){
# removing variables that contain only NAs
pattern <- grep(pattern = "kurtosis|mean|max|min|var|stddev|avg|skewness|amplitude",ignore.case = T,x = names(dataset))
dataset <- dataset[,-pattern]
dataset <- dataset[,-c(1:5)]
}
dataset <- clean(dataset)
data_trainig <- clean(data_trainig)
dataset$new_window <- factor(dataset$new_window)
dataset$classe <- factor(dataset$classe)
data_trainig$new_window <- factor(data_trainig$new_window)
zerp <- nearZeroVar(dataset)
dataset<- dataset[, -zerp]
# Removing highly correlated vars
highcorelation <- findCorrelation(cor(dataset[-c(1,54)],use = "complete.obs"), cutoff=.75)
dataset <- dataset[-highcorelation]
```
Finally, we also used a data reduction technique known as Principal Component Analysis, to select a smaller number of predictors for our model. These predictors were then fed into _randomForest_ function, which implements random forest algorithm. Generally, this method is faster than corresponding method in the _train_ function in the _caret_ package. Please note that training dataset was split into two additional sets.
```{r warning=F, message=F}
set.seed(123)
inTrain <- createDataPartition(y=dataset$classe,p=0.75, list=FALSE)
training <- dataset[inTrain,]
testing <- dataset[-inTrain,]
# Running PCA
pca <- preProcess(training[,-36],method="pca",pcaComp=7,thresh=0.8)
pca_training <- predict(pca,training[,-36])
# Creating Random Forest Model
model <- randomForest(training$classe ~.,data=pca_training, na.action = na.omit)
print(model)
model$importance
plot(model$importance[1])
plot(model$importance[,1])
model$importance[,1]
plot(model)
print(model)
plot(margin(model))
